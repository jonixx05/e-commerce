import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import 'package:shop_app/providers/products.dart';

import '../models/http_exception.dart';

class ProductsProvider with ChangeNotifier {
  List<Product> _items = [];

  final String? authToken;
  final String? userId;

  ProductsProvider(this.authToken, this.userId, this._items);

  List<Product> get items {
    return [..._items];
  }

  List<Product> get favoriteItems {
    return _items.where((prodItem) => prodItem.isFavorite).toList();
  }

  //finding items by id from _items
  Product findById(String id) {
    return _items.firstWhere((prod) => prod.id == id);
  }

  ///fetching data from the server
  Future<void> fetchAndSetProducts([bool filterByUser = false]) async {
    final filterString =
        filterByUser ? "orderBy='creatorId'&equalTo='$userId'" : "";
    var url = Uri.parse(
        "https://jonix-shop-app-default-rtdb.firebaseio.com/products.json?auth=$authToken&$filterString");

    try {
      final response = await http.get(url);
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      final List<Product> loadedProducts = [];
      if (extractedData.isEmpty) {
        return;
      }

      //fetching favorite products
      url = Uri.parse(
          "https://jonix-shop-app-default-rtdb.firebaseio.com/userFavorite/$userId.json?auth=$authToken");

      final favoriteResponse = await http.get(url);
      final favoriteData = json.decode(favoriteResponse.body);

      extractedData.forEach((prodId, prodData) {
        ///Adding the extracted data to a new list which is of the type Product, our model created
        loadedProducts.add(Product(
          id: prodId,
          title: prodData["title"],
          description: prodData["description"],
          price: prodData["price"],
          imageAsset: prodData["imageAsset"],
          isFavorite:
              favoriteData == null ? false : favoriteData[prodId] ?? false,
        ));
        _items = loadedProducts;
        notifyListeners();
      });
    } catch (error) {
      throw (error);
    }
  }

  Future<void> addProduct(Product product) async {
    final url = Uri.parse(
        "https://jonix-shop-app-default-rtdb.firebaseio.com/products.json?auth=$authToken");

    try {
      final response = await http.post(
        url,
        body: json.encode({
          "title": product.title,
          "description": product.description,
          "price": product.price,
          "imageAsset": product.imageAsset,
          "creatorId": userId,
        }),
      );

      final newProduct = Product(
        //creating new products to be added by the user
        id: json.decode(
            response.body)['name'], //getting the id generated by firebase
        title: product.title,
        description: product.description,
        price: product.price,
        imageAsset: product.imageAsset,
      );
      //adding newProduct to item list
      _items.add(newProduct);
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  ///Method for updating products
  Future<void> updateProduct(String id, Product newProduct) async {
    final prodIndex = _items.indexWhere((prod) => prod.id == id);
    final url = Uri.parse(
        "https://jonix-shop-app-default-rtdb.firebaseio.com/products/$id.json?auth=$authToken"); //the id is used to get specific products to be updated

    await http.patch(
      url,
      body: json.encode(
        {
          "title": newProduct.title,
          "description": newProduct.description,
          "imageAsset": newProduct.imageAsset,
          "price": newProduct.price,
        },
      ),
    );
    if (prodIndex >= 0) {
      _items[prodIndex] = newProduct;
    }
    notifyListeners();
  }

  ///deleting product by id
  Future<void> deleteProduct(String id) async {
    final url = Uri.parse(
        "https://jonix-shop-app-default-rtdb.firebaseio.com/products/$id.json?auth=$authToken"); //the id is used to get specific products to be updated
    //getting the index of the existing product which we want to remove from the items list
    final existingProductIndex = _items.indexWhere((prod) => prod.id == id);
    //initializing a pointer to the index of the product we want to delete from the item list
    var existingProduct = _items[existingProductIndex];
    _items.removeAt(
        existingProductIndex); //this removes the product from the list but not from the memory
    notifyListeners();
    final response = await http.delete(url);

    if (response.statusCode >= 400) {
      //retrieving the data deleted if an error occurs
      _items.insert(existingProductIndex, existingProduct);
      notifyListeners();
      throw HttpException("Could not delete product.");
    }
    //if an error doesn't occur, then remove the product which was deleted from memory
    // existingProduct;
  }
}
